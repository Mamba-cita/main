"use server";
import { connectToDB } from "../../utils";
import { Order } from "../../models";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";


// Function to add orders
export const addOrder = async (formData) => {
  const {
    workflow,
    client,
    client1,
    origin,
    origin1,
    origin2,
    origin3,
    des,
    des1,
    des2,
    des3,
    des4,
    empty_pic,
    empty_pic1,
    cont_no,
    cont_no1,
    cargo_rate,
    rate_type,
    rate_currency,
    payment_terms,
    trans_rate,
    trans_rate_type,
    trans_rate_currency,
    trans_payment_terms,
    agent,
    vessel,
    load_cont,
    off_cont,
    commodity,
    commodity1,
    commodity2,
    packaging,
    trailer_types,
    load_date,
    last_load_date,
    lpo,
    status,
    arrival_ld,
    arrival_ld1,
    arrival_ld2,
    arrival_ld3,
    arrival_ld4,
    arrival_ld5,
    dep_ld,
    dep_ld1,
    dep_ld2,
    dep_ld3,
    dep_ld4,
    dep_ld5,
    arrival_border,
    arrival_border1,
    arrival_border2,
    arrival_border3,
    arrival_border4,
    arrival_border5,
    arrival_border6,
    dep_border,
    dep_border1,
    dep_border2,
    dep_border3,
    dep_border4,
    dep_border5,
    arrival_off,
    dep_off,
    dep_off1,
    dep_off2,
    dep_off3,
    dep_off4,
    dep_off5,
    arrival_emp_off,
    arrival_emp_off1,
    dep_emp_off,
    dep_emp_off1,
    load_qty,
    load_qty1,
    load_qty2,
    load_qty3,
    offload_qty,
    offload_qty1,
    offload_qty2,
    offload_qty3,
    loaded_bg,
    loaded_bg1,
    loaded_bg2,
    loaded_bg3,
    offloaded_bg,
    offloaded_bg1,
    offloaded_bg2,
    offloaded_bg3,
    trucks_needed,
    truck,
    trailer,
    driver,
  } = Object.fromEntries(formData);

  try {
    await connectToDB();

    // Ensure trucks_needed is a number and greater than 0
    const numberOfOrders = parseInt(trucks_needed, 10);
    if (isNaN(numberOfOrders) || numberOfOrders <= 0) {
      throw new Error("Invalid number of trucks needed.");
    }

    // Function to generate the next order number
    const generateOrderNumber = async () => {
      const latestOrder = await Order.findOne().sort({ order_number: -1 }).limit(1);
      if (latestOrder) {
        const lastOrderNumber = latestOrder.order_number;
        const newOrderNumber = parseInt(lastOrderNumber.replace('TSM', '')) + 1;
        return `TSM${newOrderNumber.toString().padStart(3, '0')}`;
      }
      return 'TSM001';
    };

    const orders = [];
    for (let i = 0; i < numberOfOrders; i++) {
      const orderNumber = await generateOrderNumber();

      const newOrder = new Order({
        order_number: orderNumber,
        workflow,
        client,
        client1,
        origin,
        origin1,
        origin2,
        origin3,
        des,
        des1,
        des2,
        des3,
        des4,
        empty_pic,
        empty_pic1,
        cont_no,
        cont_no1,
        cargo_rate,
        rate_type,
        rate_currency,
        payment_terms,
        trans_rate,
        trans_rate_type,
        trans_rate_currency,
        trans_payment_terms,
        agent,
        vessel,
        load_cont,
        off_cont,
        commodity,
        commodity1,
        commodity2,
        packaging,
        trailer_types,
        load_date,
        last_load_date,
        lpo,
        status,
        arrival_ld,
        arrival_ld1,
        arrival_ld2,
        arrival_ld3,
        arrival_ld4,
        arrival_ld5,
        dep_ld,
        dep_ld1,
        dep_ld2,
        dep_ld3,
        dep_ld4,
        dep_ld5,
        arrival_border,
        arrival_border1,
        arrival_border2,
        arrival_border3,
        arrival_border4,
        arrival_border5,
        arrival_border6,
        dep_border,
        dep_border1,
        dep_border2,
        dep_border3,
        dep_border4,
        dep_border5,
        arrival_off,
        dep_off,
        dep_off1,
        dep_off2,
        dep_off3,
        dep_off4,
        dep_off5,
        arrival_emp_off,
        arrival_emp_off1,
        dep_emp_off,
        dep_emp_off1,
        load_qty,
        load_qty1,
        load_qty2,
        load_qty3,
        offload_qty,
        offload_qty1,
        offload_qty2,
        offload_qty3,
        loaded_bg,
        loaded_bg1,
        loaded_bg2,
        loaded_bg3,
        offloaded_bg,
        offloaded_bg1,
        offloaded_bg2,
        offloaded_bg3,
        truck,
        trailer,
        driver,
      });

      orders.push(newOrder.save());
    }

    await Promise.all(orders);
    revalidatePath("/dashboard/orders");
    // Redirecting to the orders page
    redirect("/dashboard/orders");
  } catch (err) {
    console.error(err);
    throw new Error("Failed to create orders!");
  }
};

// Function to update an order
export const updateOrder = async (id, formData) => {
  const {
    workflow,
    client,
    client1,
    origin,
    origin1,
    origin2,
    origin3,
    des,
    des1,
    des2,
    des3,
    des4,
    empty_pic,
    empty_pic1,
    cont_no,
    cont_no1,
    cargo_rate,
    rate_type,
    rate_currency,
    payment_terms,
    trans_rate,
    trans_rate_type,
    trans_rate_currency,
    trans_payment_terms,
    agent,
    vessel,
    load_cont,
    off_cont,
    commodity,
    commodity1,
    commodity2,
    packaging,
    trailer_types,
    load_date,
    last_load_date,
    lpo,
    status,
    arrival_ld,
    arrival_ld1,
    arrival_ld2,
    arrival_ld3,
    arrival_ld4,
    arrival_ld5,
    dep_ld,
    dep_ld1,
    dep_ld2,
    dep_ld3,
    dep_ld4,
    dep_ld5,
    arrival_border,
    arrival_border1,
    arrival_border2,
    arrival_border3,
    arrival_border4,
    arrival_border5,
    arrival_border6,
    dep_border,
    dep_border1,
    dep_border2,
    dep_border3,
    dep_border4,
    dep_border5,
    arrival_off,
    dep_off,
    dep_off1,
    dep_off2,
    dep_off3,
    dep_off4,
    dep_off5,
    arrival_emp_off,
    arrival_emp_off1,
    dep_emp_off,
    dep_emp_off1,
    load_qty,
    load_qty1,
    load_qty2,
    load_qty3,
    offload_qty,
    offload_qty1,
    offload_qty2,
    offload_qty3,
    loaded_bg,
    loaded_bg1,
    loaded_bg2,
    loaded_bg3,
    offloaded_bg,
    offloaded_bg1,
    offloaded_bg2,
    offloaded_bg3,
    truck,
    trailer,
    driver,
  } = formData;

  try {
    await connectToDB();

    const updatedOrder = await Order.findByIdAndUpdate(
      id,
      {
        workflow,
        client,
        client1,
        origin,
        origin1,
        origin2,
        origin3,
        des,
        des1,
        des2,
        des3,
        des4,
        empty_pic,
        empty_pic1,
        cont_no,
        cont_no1,
        cargo_rate,
        rate_type,
        rate_currency,
        payment_terms,
        trans_rate,
        trans_rate_type,
        trans_rate_currency,
        trans_payment_terms,
        agent,
        vessel,
        load_cont,
        off_cont,
        commodity,
        commodity1,
        commodity2,
        packaging,
        trailer_types,
        load_date,
        last_load_date,
        lpo,
        status,
        arrival_ld,
        arrival_ld1,
        arrival_ld2,
        arrival_ld3,
        arrival_ld4,
        arrival_ld5,
        dep_ld,
        dep_ld1,
        dep_ld2,
        dep_ld3,
        dep_ld4,
        dep_ld5,
        arrival_border,
        arrival_border1,
        arrival_border2,
        arrival_border3,
        arrival_border4,
        arrival_border5,
        arrival_border6,
        dep_border,
        dep_border1,
        dep_border2,
        dep_border3,
        dep_border4,
        dep_border5,
        arrival_off,
        dep_off,
        dep_off1,
        dep_off2,
        dep_off3,
        dep_off4,
        dep_off5,
        arrival_emp_off,
        arrival_emp_off1,
        dep_emp_off,
        dep_emp_off1,
        load_qty,
        load_qty1,
        load_qty2,
        load_qty3,
        offload_qty,
        offload_qty1,
        offload_qty2,
        offload_qty3,
        loaded_bg,
        loaded_bg1,
        loaded_bg2,
        loaded_bg3,
        offloaded_bg,
        offloaded_bg1,
        offloaded_bg2,
        offloaded_bg3,
        truck,
        trailer,
        driver,
      },
      { new: true } // Return the updated document
    );

    if (!updatedOrder) {
      throw new Error("Order not found");
    }

    revalidatePath("/dashboard/orders");
    return updatedOrder;
  } catch (err) {
    console.error(err);
    throw new Error("Failed to update order!");
  }
};


export const deleteOrder = async (formData) => {
  const { id } = Object.fromEntries(formData);

  try {
    await connectToDB();
    await Order.findByIdAndDelete(id);
  } catch (err) {
    console.log(err);
    throw new Error("Failed to delete order!");
  }

  revalidatePath("/dashboard/order");
};
